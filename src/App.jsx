import React, { useContext, useEffect } from 'react'
import './App.scss'
import axios from './axios'

import Table from './components/Table/Table'
import Pagination from './components/Pagination'
import { UserContext } from './UserContext'

/*
	–°–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –Ω–µ —É—Å–ø–µ–ª –¥–æ–¥–µ–ª–∞—Ç—å
	–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª Readux —Ç–∞–∫ –∫–∞–∫ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –¥—É–º–∞–ª, —á—Ç–æ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
	–•–æ—Ç—è —Å –Ω–∏–º –±—ã–ª–æ –±—ã –ø—Ä–æ—â–µ..

	–î—É–º–∞—é –µ—â–µ –±—ã —á–µ—Ä–µ–∑ 72—á –¥–æ–¥–µ–ª–∞–ª –±—ã

	–ï—Å–ª–∏ —è –≤–∞–º –Ω–µ –ø–æ–¥–æ–π–¥—É, —Ç–æ –º–æ–∂–Ω–æ —Ä–µ–≤—å—é–∫–æ–¥–∞ –≤ –≤–∏–¥–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤?
	—è —Å–æ–±–∏—Ä–∞—é—Å—å –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–¥–µ–ª–∞—Ç—å
*/

function App() {
	const [rows, setRows] = React.useState([])
	const [loading, setLoading] = React.useState(false)
	const [currentPage, setCurrentPage] = React.useState(1)
	const [postsPerPage] = React.useState(10)

	const { nameColumn } = useContext(UserContext)

	//–°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–ª–æ–Ω–∫–∏
	function SortArrayByNameColumn(x, y) {
		if (nameColumn === 'id') {
			if (Number(x.id) < Number(y.id)) return -1
			if (Number(x.id) > Number(y.id)) return 1
		}
		if (nameColumn === '') {
			if (Number(x.id) < Number(y.id)) return -1
			if (Number(x.id) > Number(y.id)) return 1
		}
		if (nameColumn === 'name') {
			return x.name.localeCompare(y.name)
		}
		if (nameColumn === 'quantity') {
			if (x.quantity < y.quantity) return -1
			if (x.quantity > y.quantity) return 1
		}
		if (nameColumn === 'distance') {
			if (Number(x.distance) < Number(y.distance)) return -1
			if (Number(x.distance) > Number(y.distance)) return 1
		}
	}
	rows.sort(SortArrayByNameColumn)

	//–¢—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø—ã—Ç–∞—è—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫

	// const finded = (rows) => {
	// 	// console.log('üöÄ rows', rows)
	// 	// console.log(rows.includes('Vipe'))
	// 	rows.push(rows.find((row) => row?.name.includes('Vipe')))
	// 	console.log(
	// 		'üöÄ rows.push',
	// 		rows.push(rows.find((row) => row?.name.includes('Vipe'))),
	// 	)
	// }
	// finded(rows)

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
	React.useEffect(() => {
		async function fetchTableRows() {
			try {
				//–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
				setLoading(true)
				//–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
				const { data } = await axios.get(`/get`)

				setRows(data)
				//–ó–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
				setLoading(false)
			} catch (err) {
				//–ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è
				console.warn(err)
				alert('Request failed')
			}
		}
		fetchTableRows()
	}, [])

	// –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –±—É–¥–µ—Ç
	const indexOfLastPost = currentPage * postsPerPage
	const indexOfFirstPost = indexOfLastPost - postsPerPage
	const currentRows = rows.slice(indexOfFirstPost, indexOfLastPost)

	// Change page
	const paginate = (pageNumber) => setCurrentPage(pageNumber)

	return (
		<div className='wrapper'>
			<main className='page'>
				<Table rows={currentRows} loading={loading} />
				<div className='table__container'>
					<Pagination
						postsPerPage={postsPerPage}
						totalRows={rows.length}
						paginate={paginate}
						loading={loading}
					/>
				</div>
			</main>
		</div>
	)
}

export default App
